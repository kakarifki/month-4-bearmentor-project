// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Province {
  id             Int           @id @default(autoincrement())
  name           String
  provinceCode   String        @unique
  capital_city   String
  population     Int?
  area_size      Float?
  ethnicgroups   EthnicGroup[]
  cultures       Culture[]
  regional_songs RegionalSong[]
  cuisines       Cuisine[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("provinces")
}

model EthnicGroup {
  id              Int       @id @default(autoincrement())
  name            String
  ethnicGroupCode String    @unique
  provinceCode    String
  province        Province  @relation(fields: [provinceCode], references: [provinceCode], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("ethnicgroups")
}

model Culture {
  id              Int       @id @default(autoincrement())
  name            String
  cultureCode     String    @unique
  category        String
  description     String?
  provinceCode    String
  province        Province  @relation(fields: [provinceCode], references: [provinceCode], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("cultures")
}

model RegionalSong {
  id              Int       @id @default(autoincrement())
  title           String
  regionalSongCode String   @unique
  composer        String?
  provinceCode    String
  province        Province  @relation(fields: [provinceCode], references: [provinceCode], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("regionalsongs")
}

model Cuisine {
  id              Int       @id @default(autoincrement())
  name            String
  cuisineCode     String    @unique
  description     String?
  provinceCode    String
  province        Province  @relation(fields: [provinceCode], references: [provinceCode], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("cuisines")
}